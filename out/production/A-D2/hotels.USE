model Hotels

enum RoomType {BASIC, SUITE, VIP}


class Date
attributes
		day: Integer
		month: Integer
		year: Integer
	operations
		before(date: Date): Boolean =
			if date.year > self.year then true
			else if date.year < self.year then false
			else if date.month > self.month then true
			else if date.month < self.month then false
			else if date.day <= self.day then false
			else true
			endif endif endif endif endif
		 
		after(date: Date): Boolean =
			if date.year < self.year then true
			else if date.year > self.year then false
			else if date.month < self.month then true
			else if date.month > self.month then false
			else if date.day >= self.day then false
			else true
			endif endif endif endif endif
			
		equals(date : Date): Boolean = 
			if self.after(date) = false and self.before(date) = false then true
			else false
			endif
			
end

class Group
	attributes
		groupId : Integer
end


class Hotel
	attributes
			name : String
			city : String
			rate : Integer
end
	
class Client
	attributes
			id : Integer
			name : String
			age : Integer
			city : String
end
	
	

class Reservation
	attributes
			id : Integer
			orderDate : Date
			requestDate : Date
end
	
class Booking
	attributes
		date : Date
end
	

class Room
	attributes
			number : Integer
end	
	
	
class RoomCategory
	attributes
			price : Integer
			type : RoomType
end	
	
class Review
	attributes
			reviewContent : String
			rank : Integer
			date : Date
end	
	
class Service
	attributes
			serviceName : String
end	
	
class RegularService < Service
end	

class CommunityService < Service
end		
	
class VipService < Service
end		
--------------------------------------------------------------------------------------------------

associationclass HotelService between
	Hotel [*]
	Service[*]
	
	attributes
			quality : Integer
			price : Integer	
end

	
associationclass ReservationSet between
	Client [*]
	Hotel[*]
end
--------------------------------------------------------------------------------------------------	
composition allReservations between
	ReservationSet[1]
	Reservation[*]
end

composition hotelRooms between
	Hotel[1]
	Room[*]
end

composition allCategories between
	Reservation[*]
	RoomCategory[1]
end
--------------------------------------------------------------------------------------------------
aggregation chain between
	Group[1]
	Hotel[*]
end

--------------------------------------------------------------------------------------------------
association placements between
	Reservation[1]
	Booking[0..1]
end

association feedback between
	Booking[1]
	Review[0..1]
end

association usedService between
	Booking[*]
	HotelService[*]
end

association roomType between
	RoomCategory[1]
	Room[*]
end

association rentalRoom between
	Room[0..1] qualifier(date:Date)
	Booking[1]
end
--------------------------------------------------------------------------------------------------
constraints
--------------------------------------------------------------------------------------------------
context Date
inv legalDateStructure:
self.year > 0 and self.month < 13 and self.month > 0 and self.day > 0 and self.day < 32

inv february:
	let optionA: Boolean = self.month = 2 and self.year.mod(400) = 0,
		optionB: Boolean = self.month = 2 and self.year.mod(100) <> 0 and self.year.mod(4) = 0,
		optionC: Boolean = optionA or optionB or self.day < 29
	in	
		self.month = 2 implies optionC and self.day < 30
		
inv shortMonth:
	let shortM: Boolean = self.month = 4 or self.month = 6 or self.month = 9 or self.month = 11
	in	
		shortM implies self.day < 31


--------------------------------------------------------------------------------------------------
-- TO DO --

Context Group
invariant UniqueGroupHotelPerCity:
self.Hotel -> forAll(h1,h2: Hotel | h1.city = h2.city implies h1=h2)

Context Hotel
invariant HotelRateBetweenOneAndFive:
self.rate >1 and self.rate<=5

Context Booking
invariant BookingDate
self.date = self.Reservation.requestDate

Context Hotel
invariant UniqueRoomNumberPerHotel:
self.room -> isUnique(r: Room | r.number)

Context ReservationSet
invariant OneVIPReservation
self.Reservation -> size() > 4 implies self.Reservation.RoomCategory -> exist(rc: RoomCategory |rc.type = VIP) 

Context Booking
invariant ReviewDateAfterBooking
self.Review.date.after(self.date)

Context Client
invariant DifferentCityOfClient
self.Hotel.city <> self.city

Context Reservation
invariant BookingHotelEqualsReservationHotel
self.ReservationSet.Hotel = self.Booking.Room.Hotel  

Context Group
invariant SameServicesInGroup
self.Hotel -> forAll(h1,h2 : Hotel | h1.service = h2.service)

Context Hotel
invariant ReservationRoomTypeInHotel
self.ReservationSet.Reservation.RoomCategory -> forAll(rc : RoomCategory | self.Room.RoomCategory -> asSet() -> exist(rc1: RoomCategory | rc = rc1))

Context RoomCategory
invariant  NoVIPIfRateIsUnderFour
self.type = VIP implies self.Room -> forAll(r: Room | r.Hotel.rate >= 4) 

Context Room
invariant VIPRoomContainsVIPServicesOnly
self.RoomCategory.type = VIP implies self.Booking.HotelService-> forAll(hs: HotelService | hs.isOclTypeOf(VipService))


Context Hotel
invariant AmountOfVIP
Let numOfVIP: Integer = self.Room -> select(r: Room | r.RoomCategory.type = VIP) -> size()
in
numOfVIP <= self.Room ->size() * 0.1

Context Hotel
Invariant CasinoInLasVegas
Self.city = ‘LAS VEGAS’ implies self.service -> exist(s: Service | s.isOclTypeOf(CommunityService) and self.serviceName = ‘CASINO’)

Context Hotel
Invariant CasinoInLasVegas
Self.city = ‘LAS VEGAS’ implies self.Client -> forAll(c: Client | c.age >= 21)

Context Booking
Invariant RoomUpgrade
Self.Reservation.RoomCategory.type = VIP implies self.Room.RoomCategory.type = VIP
and 
Self.Reservation.RoomCategory.type = SUITE implies self.Room.RoomCategory.type = VIP or self.Room.RoomCategory.type = SUITE
and
Self.Reservation.RoomCategory.type = BASIC implies self.Room.RoomCategory.type = BASIC or self.Room.RoomCategory.type = SUITE or self.Room.RoomCategory.type = VIP

Context Booking
Invariant VIPServiceHasReview
Self.HotelService -> exist(hs: HotelService | hs.service.isOclTypeOf(VipService)) implies self.Review -> notEmpty()

Context Hotel
Invariant AvgRankOfRateFive
Let numOfReviews: Integer = self.ReservationSet.Reservation.asSet() -> select(r: Reservation | r.Booking.Review -> notEmpty()) -> size()
in
Self.rate = 5 implies self.ReservationSet -> forAll(rs: ReservationSet | rs.Reservation.asSet()   -> collect(r: Reservation | r.Booking.Review.rank) -> sum()) / numOfReviews > 7.5


Context Bookinig
Invariant ServicesBelongToHotel
Self.Room.Hotel.Service -> includesAll(self.HotelService.Service)

Context Hotel
invariant UniqueServices:
self.service -> isUnique(s: Service | s.serviceName)
